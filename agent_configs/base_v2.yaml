version: 2

profile:
  name: default
  description: maximally modular agent coder
  seed: 42

workspace:
  root: ./agent_ws
  sandbox:
    driver: docker
    runtime: runsc
    image: gcc-dev:latest
    network: none
    resources: { cpus: 2, mem_gb: 8 }
  lsp:
    enabled: true
    diagnostics_on_write: true
    servers: [pyright, clangd, tsserver]

providers:
  default_model: openrouter/openai/gpt-5-nano
  models:
    - id: openrouter/openai/gpt-5-nano
      adapter: openai
      params:
        temperature: 0.2
        parallel_tools: true
        structured_outputs: { enabled: true, strict: true }
    - id: anthropic/claude-3-7-sonnet
      adapter: anthropic
      params:
        tool_use: true

prompts:
  packs:
    base:
      system: implementations/system_prompts/default.md
      plan: implementations/system_prompts/claude_code/system-workflow.prompt.md
      builder: implementations/system_prompts/default.md
      compact: implementations/system_prompts/default.md
      tools_catalog_full: implementations/system_prompts/default.md
      tools_catalog_short: implementations/system_prompts/default.md
  injection:
    system_order:
      - "@pack(base).system"
      - "[CACHE] @pack(base).tools_catalog_full"
    per_turn_order:
      - "mode_specific"
      - "@pack(base).tools_catalog_short"
  cache:
    enabled: true
    key: "sha256(config+prompts+toolset)"
  evolution:
    enabled: false
    store_dir: ./implementations/prompt_evolution

tools:
  registry:
    paths: [implementations/tools/defs]
    include: ["*"]
  overlays: []
  aliases: { patch: apply_unified_patch, edit: apply_search_replace }
  dialects:
    preference:
      default: [unified_diff, aider_search_replace, opencode_patch, bash_block]
      by_model:
        "openrouter/openai/*": { native: true, order: [yaml_command, unified_diff, opencode_patch] }
        "anthropic/*": { order: [aider_search_replace, unified_diff] }
      by_tool_kind:
        diff:  [unified_diff, aider_search_replace, opencode_patch]
        bash:  [bash_block, provider_native]
    selection:
      by_model:
        "openrouter/openai/*": [unified_diff, opencode_patch]
        "anthropic/*": [aider_search_replace, unified_diff]
      by_tool_kind:
        diff:  [unified_diff, aider_search_replace, opencode_patch]
        bash:  [bash_block, provider_native]
    create_file_policy:
      unified_diff: { header_style: git, use_dev_null: true }
      aider_search_replace: { prefer_write_file_tool: true }

modes:
  - name: plan
    prompt: "@pack(base).plan"
    tools_enabled: [read_file, list_dir, glob, grep]
    tools_disabled: [apply_unified_patch, apply_search_replace, run_shell]
  - name: build
    prompt: "@pack(base).builder"
    tools_enabled: ["*"]
  - name: compact
    prompt: "@pack(base).compact"
    tools_enabled: []
    triggers: { tokens_remaining_pct_lt: 20 }

loop:
  sequence:
    - if: "features.plan"
      then: { mode: plan }
    - mode: build
    - while: "needs_compact"
      do: { mode: compact }
  turn_strategy: { relay: tool_role, flow: assistant_continuation, tool_result_injection: summarize }

concurrency:
  groups:
    - { name: fs_reads, match_tools: [read_file, glob, grep, list_dir], max_parallel: 4 }
    - { name: edits_and_bash, match_tools: [apply_unified_patch, apply_search_replace, run_shell], max_parallel: 1, barrier_after: apply_unified_patch }
  nonblocking_tools: [read_file, glob, grep, list_dir]
  at_most_one_of: [run_shell]

completion:
  primary: hybrid
  tool_finish: mark_task_complete
  natural_finish: { no_tool_turns_threshold: 2, idle_turn_limit: 1 }
  provider_signals: true
  text_sentinels: ["TASK COMPLETE","ALL TESTS PASSED","IMPLEMENTATION COMPLETE", ">>>>>> END RESPONSE"]
  confidence_threshold: 0.6

hpo:
  enabled: false
  objective: episode_return
  wandb: { project: raycoder, entity: your_team, mode: online }
  search: { algorithm: bayes-hyperband, max_runs: 200 }
  params: {}

rl_and_evolution:
  prompt_evolver: { enabled: false }
  policy_rl: { enabled: false }

telemetry:
  database_path: ./perf/enhanced_tool_calling.db
  per_turn_metrics: [SVS, ACS, CPS, PAS, HMR, LED, SBS, TPF_DELTA, TE, LE, TOE, SPA]


